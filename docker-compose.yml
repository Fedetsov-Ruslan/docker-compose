services:
  bot:
    build: ./bot
    container_name: telegram_bot
    env_file:
      - .env.docker
    depends_on:
      - db
      - redis
      - fastapi
    ports:
      - "8000:8000"
    networks:
      - tg-bot
    command: ["./wait-for-it.sh", "db:5432", "--", "python", "app.py"]

  fastapi:
    build: ./fastapi
    container_name: fastapi_app
    ports:
      - "8010:8010"
    env_file:
      - .env.docker
    depends_on:
      - db
    networks:
      - tg-bot
    command: ["./wait-for-it.sh", "db:5432", "--", "uvicorn", "main:app", "--reload", "--host", "0.0.0.0", "--port", "8010"]

  db:
    image: postgres
    container_name: bot_db
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tg-bot

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - tg-bot

  nginx:
    image: nginx:alpine
    container_name: nginx_web
    volumes:
      - ./nginx/first_start/:/etc/nginx/templates/:ro
      - ./certbot/ssl:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fastapi
    networks:
      - tg-bot

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/ssl:/etc/letsencrypt
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    entrypoint: /bin/sh -c '/certbot/init-letsencrypt.sh'
    networks:
      - tg-bot
  
networks:
  tg-bot:
    driver: bridge

